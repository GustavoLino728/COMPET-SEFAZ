from django.db import models
from django.utils import timezone


class Question(models.Model):
    """
    Model to store multiple choice questions generated by AI
    """
    
    # Basic question fields
    question_text = models.TextField(verbose_name="Question text")
    topic = models.CharField(max_length=200, verbose_name="Topic")
    
    # Explanation of the correct answer
    explanation = models.TextField(verbose_name="Explanation")

    class Difficulty(models.TextChoices):
        EASY = 'EASY', 'Fácil'
        MEDIUM = 'MEDIUM', 'Médio'
        HARD = 'HARD', 'Difícil'

    # PASSO 2: Adicionar o novo campo 'difficulty'
    difficulty = models.CharField(
        max_length=10,
        choices=Difficulty.choices,
        default=Difficulty.MEDIUM,
        verbose_name="Difficulty level"
    )
    
    # Metadata
    created_at = models.DateTimeField(default=timezone.now, verbose_name="Created at")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="Updated at")
    
    # Question status
    is_active = models.BooleanField(default=True, verbose_name="Active")
    
    # AI quality metrics
    confidence_score = models.FloatField(
        default=0.0, 
        verbose_name="Confidence score"
    )
    avg_similarity_score = models.FloatField(
        default=0.0, 
        verbose_name="Average similarity score"
    )
    
    class Meta:
        verbose_name = "Question"
        verbose_name_plural = "Questions"
        ordering = ['-created_at']
    
    def __str__(self):
        return f"{self.topic} - {self.question_text[:50]}..."
    
    def get_correct_option(self):
        """Get the correct option for this question"""
        return self.options.filter(is_correct=True).first()
    
    def get_options_ordered(self):
        """Get all options ordered by creation"""
        return self.options.all().order_by('id')


class Option(models.Model):
    """
    Model to store options for multiple choice questions
    """
    
    # Foreign key to the question
    question = models.ForeignKey(
        Question, 
        on_delete=models.CASCADE, 
        related_name='options',
        verbose_name="Question"
    )
    
    # Option text
    option_text = models.TextField(verbose_name="Option text")
    
    # Indicates if this is the correct answer
    is_correct = models.BooleanField(default=False, verbose_name="Is correct")
    
    # Metadata
    created_at = models.DateTimeField(default=timezone.now, verbose_name="Created at")
    
    class Meta:
        verbose_name = "Option"
        verbose_name_plural = "Options"
        ordering = ['id']
    
    def __str__(self):
        correct_indicator = " (CORRECT)" if self.is_correct else ""
        return f"{self.question.topic} - {self.option_text[:30]}...{correct_indicator}"